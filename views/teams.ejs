<!DOCTYPE html>
<html>

<head>
  <title>Playoff Tracker 2024</title>
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <!-- Latest compiled and minified CSS -->
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.1/dist/css/bootstrap.min.css" rel="stylesheet"
    integrity="sha384-4bw+/aepP/YC94hEpVNVgiZdgIC5+VKNBQNGCHeKRQN+PtmoHDEXuppvnDJzQIu9" crossorigin="anonymous">
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.1/dist/js/bootstrap.bundle.min.js"
    integrity="sha384-HwwvtgBNo3bZJJLYd8oVXjrBZt8cqVSpeBNS5n7C8IVInixGAoxmnlMuBnhbgrkm"
    crossorigin="anonymous"></script>
</head>

<body>
  <header>
    <!-- Navbar -->
    <nav class="navbar navbar-expand-lg navbar-light bg-white fixed-top">
      <div class="container-fluid">
        <button class="navbar-toggler" type="button" data-mdb-toggle="collapse" data-mdb-target="#navbarExample01"
          aria-controls="navbarExample01" aria-expanded="false" aria-label="Toggle navigation">
          <i class="fas fa-bars"></i>
        </button>
        <div class="collapse navbar-collapse" id="navbarExample01">
          <ul class="navbar-nav me-auto mb-2 mb-lg-0">
            <li class="nav-item active">
              <a class="nav-link" aria-current="page" href="/games/1">Home</a>
            </li>
          </ul>
        </div>
      </div>
    </nav>
    <!-- Navbar -->
  </header>

  <div class="container-md">
    <div class="row text-center" style="display:flex; flex-wrap: wrap">
      <div class="container" style="margin-top: 80px;">
        <div class="row">

          <%
          // Helper functions
          function recordToString(wins, losses) {
            return `${wins}-${losses}`;
          }

          const powerConferences = ["SEC", "ACC", "Big Ten", "Big 12", "Pac-12"];
          function isPowerConf(conf, team) {
            if (!conf) return false;
            if (powerConferences.includes(conf)) return true;
            if (team === "Notre Dame") return true;
            return false;
          }

          // Build unique list of FBS teams
          let fbsTeamsSet = new Set();
          games.forEach(game => {
            if (game.homeClassification === 'fbs') fbsTeamsSet.add(game.homeTeam);
            if (game.awayClassification === 'fbs') fbsTeamsSet.add(game.awayTeam);
          });
          let fbsTeams = Array.from(fbsTeamsSet).sort();

          // Team stats container
          let teamStats = {};
          fbsTeams.forEach(team => {
            teamStats[team] = {
              wins: 0,
              losses: 0,
              qualityTotal: 0,
              wlqTotal: 0,
              gamesPlayed: 0,
              gameStats: []
            };
          });

          //
          // ---------- PASS 1: build wins/losses and quality totals ----------
          //
          games.forEach(game => {
            ['home', 'away'].forEach(side => {
              const team = game[side + 'Team'];
              const teamClass = game[side + 'Classification'];
              if (teamClass !== 'fbs') return;

              const oppSide = side === 'home' ? 'away' : 'home';
              const opponent = game[oppSide + 'Team'];
              const opponentClass = game[oppSide + 'Classification'];
              const opponentConf = game[oppSide + 'Conference'];

              const teamPoints = game[side + 'Points'];
              const oppPoints = game[oppSide + 'Points'];
              const won = teamPoints > oppPoints;

              const opponentInPower = isPowerConf(opponentConf, opponent);

              let qualityChange = 0;
              if (opponentClass === 'fcs') {
                qualityChange = won ? 0.0 : -1.5;
              } else if (opponentInPower) {
                qualityChange = won ? 1.15 : -0.4;
              } else if (opponentClass === 'fbs') {
                qualityChange = won ? 1.0 : -0.5;
              }

              if (won) teamStats[team].wins++;
              else teamStats[team].losses++;
              teamStats[team].gamesPlayed++;

              teamStats[team].qualityTotal += qualityChange;

              // Store game info for later WLQ calculation
              teamStats[team].gameStats.push({
                game,
                won,
                qualityChange,
                opponent,
                opponentClass,
                opponentConf
              });
            });
          });

          //
          // ---------- PASS 2: calculate WLQ scores using cumulative opponent totals ----------
          //
          fbsTeams.forEach(team => {
            teamStats[team].wlqTotal = 0; // reset, weâ€™ll accumulate fresh
            teamStats[team].gameStats.forEach(g => {
              const { game, won, qualityChange, opponent, opponentClass, opponentConf } = g;
              const isChampionship = game.notes && game.notes.toLowerCase().includes('championship');
              const opponentQuality = teamStats[opponent] ? teamStats[opponent].qualityTotal : 0;

              let wlqScore = 0;
              if (opponentClass === 'fcs') {
                wlqScore = won ? 0.0 : (isChampionship ? 1 : -1.5);
              } else if (opponentClass === 'fbs') {
                if (isChampionship) {
                  wlqScore = won ? (1 + opponentQuality * 0.10) : 1;
                } else {
                  wlqScore = won ? (1 + opponentQuality * 0.10) : (-1 + opponentQuality * 0.08);
                }
              }

              teamStats[team].wlqTotal += wlqScore;

              g.wlqScore = wlqScore; // store for display
            });
          });

          // Rankings Table
          const rankings = fbsTeams.map(team => {
            const s = teamStats[team];
            return {
              teamName: team,
              record: recordToString(s.wins, s.losses),
              wlqTotal: s.wlqTotal,
              wlqAvg: s.gamesPlayed > 0 ? s.wlqTotal / s.gamesPlayed : 0
            };
          }).sort((a, b) => b.wlqAvg - a.wlqAvg);
          %>

          <h2>Rankings</h2>
          <table border="1" cellspacing="0" cellpadding="5">
            <thead>
              <tr>
                <th>Rank</th>
                <th>Team</th>
                <th>Record</th>
                <th>Win/Loss Quality Score</th>
                <th>WLQ Avg</th>
              </tr>
            </thead>
            <tbody>
              <% rankings.forEach((r, i) => { %>
                <tr>
                  <td><%= i + 1 %></td>
                  <td><%= r.teamName %></td>
                  <td><%= r.record %></td>
                  <td><%= r.wlqTotal.toFixed(2) %></td>
                  <td><%= r.wlqAvg.toFixed(3) %></td>
                </tr>
              <% }) %>
            </tbody>
          </table>

          <hr />

          <% fbsTeams.forEach(team => { 
              const stats = teamStats[team];
              let wins = 0, losses = 0;
              let runningWlqTotal = 0;
              let runningQualityTotal = 0;
          %>
            <h3><%= team %> Schedule (Record: <%= recordToString(stats.wins, stats.losses) %>)</h3>
            <table border="1" cellspacing="0" cellpadding="5">
              <thead>
                <tr>
                  <th>Week</th>
                  <th>Home Team</th>
                  <th>Away Team</th>
                  <th>Home Points</th>
                  <th>Away Points</th>
                  <th>Result</th>
                  <th>Record</th>
                  <th>Quality (Change)</th>
                  <th>Win/Loss Quality Score (Change)</th>
                </tr>
              </thead>
              <tbody>
                <% stats.gameStats.forEach(({game, won, qualityChange, wlqScore}) => {
                    if (won) wins++; else losses++;
                    const runningRecord = recordToString(wins, losses);
                    runningWlqTotal += wlqScore;
                    runningQualityTotal += qualityChange;

                    const homeIsTeam = game.homeTeam === team;
                    const awayIsTeam = game.awayTeam === team;

                    const homeOppStats = teamStats[game.homeTeam] || { wins: 0, losses: 0, qualityTotal: 0 };
                    const awayOppStats = teamStats[game.awayTeam] || { wins: 0, losses: 0, qualityTotal: 0 };
                %>
                  <tr>
                    <td><%= game.week %></td>

                    <!-- Home Team -->
                    <td>
                      <% if (homeIsTeam) { %>
                        <%= game.homeTeam %>
                      <% } else { %>
                        <%= game.homeTeam %>
                        <% if (game.homeClassification === 'fbs') { %>
                          [<%= recordToString(homeOppStats.wins, homeOppStats.losses) %>] 
                          (<%= homeOppStats.qualityTotal.toFixed(2) %>)
                        <% } else { %> (N/A) <% } %>
                      <% } %>
                    </td>

                    <!-- Away Team -->
                    <td>
                      <% if (awayIsTeam) { %>
                        <%= game.awayTeam %>
                      <% } else { %>
                        <%= game.awayTeam %>
                        <% if (game.awayClassification === 'fbs') { %>
                          [<%= recordToString(awayOppStats.wins, awayOppStats.losses) %>] 
                          (<%= awayOppStats.qualityTotal.toFixed(2) %>)
                        <% } else { %> (N/A) <% } %>
                      <% } %>
                    </td>

                    <td><%= game.homePoints %></td>
                    <td><%= game.awayPoints %></td>
                    <td><%= won ? "win" : "loss" %></td>
                    <td><%= runningRecord %></td>
                    <td><%= runningQualityTotal.toFixed(2) %> (<%= qualityChange.toFixed(2) %>)</td>
                    <td><%= runningWlqTotal.toFixed(2) %> (<%= wlqScore.toFixed(2) %>)</td>
                  </tr>
                <% }) %>
              </tbody>
            </table>
            <hr />
          <% }) %>

        </div>
      </div>
    </div>
  </div>

  <div class="footer d-flex justify-content-center align-items-center">
    <h5>&copy; Taylor Bros. Gaming - 2023</h5>
  </div>
</body>
</html>
